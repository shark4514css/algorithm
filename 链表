1. 指针或引用的含义
   指针或者引用的含义，是存储所指对象的内存地址
   将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针。
   指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量
2. 警惕指针丢失和内存泄露
3. 利用哨兵简化实现难度
   如果我们在结点p后面插入一个新的结点，只需要下面两行代码：
   new_node->next = p->next;
   p->next = new_node;
   但是如果我们向一个空链表中插入第一个节点，就不能用这个逻辑了，就要做特殊处理
   用head表示链表的头结点。对于单链表的插入操作，第一个结点和其他结点的插入逻辑是不一样的。
   第一个结点的插入逻辑：
   if (head === null) {
     head = new_code;
   }
   删除操作也是同理：
   如果要删除结点p的后继结点，代码如下：
   p->next = p->next->next;
   但是，如果我们要删除链表中的最后一个结点，前面的删除代码就不能用了，正确代码如下：
   if （head->next=== null）{
     head = null;
   }
   总结：针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理
   这样的代码繁琐不简洁，容易出错，可以用哨兵
   我们引入哨兵结点，在任何时候，不管链表是不是空，head指针都会一直指向哨兵结点。
   我们也把这种哨兵结点的链表叫作带头链表。没有哨兵结点的链表就是不带头链表。
   哨兵结点是不存储数据的。因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，代码逻辑统一
4. 留意边界条件
   如下几个方面
   （1）如果链表为空，代码是否正常
   （2）链表只包含一个结点的时候，代码是否正常
   （3）链表只包含两个结点的时候，代码是否正常
   （4）代码逻辑在处理头结点和尾结点的时候，是否能正常工作
5. 举例画图，辅助思考
   
   
   
   
