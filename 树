1. 高度： 从底层开始度量，计数起点是0
   深度： 从上向下度量，从根节点开始计算，计数起点是0
   层数： 跟深度类似，也是从上向下度量，计数起点是1，也就是根节点位于第一层
2. 满二叉树： 叶子节点全都在最底层，除了叶子节点之外，每个节点都是有左右两个子节点
   完全二叉树： 叶子节点都在最底下两层，最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大
              另外一种定义： 对一个n个节点的二叉树，按层级顺序编号，则所有节点的编号从1到n。如果这个树所有节点和同样深度的满二叉树的编号为1到n
                          的节点位置相同，则称为完全二叉树。
3. 基于数组的顺序存储法： 我们把根节点存储在下标i = 1的位置，把左子节点存储在下标2 * i = 2的位置，右子节点存储在2 * i + 1 = 3的位置。
   以此类推，如果节点X存储在数组中下标为i的位置，下标为2 * i的位置存储的就是左子节点，下标为2 * i+ 1的位置存储的就是右子节点。
   反过来，下标为i/2的位置存储就是它的父节点。
   通过这种方式，我们只需要知道根节点存储的位置（一般存储在1的位置），这样就可以通过下标计算，把整棵树都串起来
   非完全二叉树这样存储会浪费很多空间，完全二叉树就只浪费了0的位置
4. 二叉树的遍历： 将所有节点都遍历打印出来，方法有三种
   前序遍历
   中序遍历
   后续遍历
   其中，前、中、后表示的是节点与他的左右子树节点遍历打印的先后顺序
5. 前序遍历： 对于树中的任意节点，先打印这个节点，再打印它的左子树，再打印它的右子树
6. 中序遍历： 对于树中的任意节点，先打印它的左子树，再打印这个节点，最后打印它的右子树
7. 后序遍历： 对于树中的任意节点，先打印它的左子树，再打印它的右子树，最后打印这个节点
8. 二叉树的遍历时间复杂度： 每个节点最多会被访问两次，所以时间复杂度是O（n）

   
