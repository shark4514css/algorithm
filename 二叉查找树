1. 二叉查找树要求：树的任意一个结点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树的节点的值都要大于这个节点的值。
2. 二叉查找树的查找操作： 首先取根节点，如果它等于我们要查找的数据，那就返回。如果要查找的数据比根节点小，那就在左子树中查找，
   如果要查找的数据比根节点的值大，那就在右子树中递归查找
3. 二叉查找树的插入操作：
   新插入的数据一般都在叶子节点上，所以我们只需要从根节点开始，一次比较要插入的数据和节点的大小关系。
   如果要插入的数据比结点的数据大，并且节点的右子树为空，就将新数据直接插到右子节点的位置；
   如果不为空，就再递归遍历右子树，查找插入位置。
   同理，插入左子树也是相同操作
4. 二叉查找树的删除操作：
  （1）如果要删除的节点只有一个子节点，我们只需要更新父节点中，指向要删除的节点的指针，让它指向要删除节点的子节点就可以了
  （2）如果要删除的节点没有子节点，我们只需要直接将父节点中，指向要删除的节点的指针，指向null；
  （3）如果要删除的节点有两个点子节点：我们需要找到这个节点的右子树中的最小节点，把他替换到要删除的节点上，
      再删除这个最小节点（这个节点肯定没有左子节点，所以可用1，2两条来删除）
  （4）还有个简单、取巧的方法：把要删除的节点标记为已删除，但并不真正删除。
      这样原本删除的节点还需要存储在内存内，比较浪费内存空间，但是删除操作就变得简单了。
      而且也没有增加插入、查找操作的难度
5. 二叉查找树的其他操作
   还可以支持快速查找最大节点、最小节点、前驱节点、后继节点
6. 中序遍历二叉查找树，时间复杂度是O（n），输出有序的数据序列
